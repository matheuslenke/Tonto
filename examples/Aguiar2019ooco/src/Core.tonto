import SPO
import SWO

package Core

relation Language [1..*] -- representedIn -- [0..*] Artifact specializes ObjectOrientedProgrammingLanguage.representedBy
relation ProgrammingLanguage [1..*] -- representedIn2 -- [0..*] SoftwareItem

genset SoftwareGenset {
  general SoftwareItem
  specifics SoftwareSystem, Program, Code
}

subkind ObjectOrientedProgrammingLanguage specializes ProgrammingLanguage {
  createdDate: MyDate
  [1..*] -- representedBy -- [0..*] ObjectOrientedSourceCode
    inverseOf ObjectOrientedSourceCode.representedIn3
}
subkind ObjectOrientedSourceCode specializes SourceCode {
  [0..*] -- representedIn3 -- [1..*] ObjectOrientedProgrammingLanguage
    inverseOf ObjectOrientedProgrammingLanguage.representedBy
    
}

quality Name

category NamedElement {
  [1] -- characterizedBy -- [*] Name
  [1] -- characterizedBy2 -- [*] ElementVisibility
}

quality ElementVisibility {
  
}

category Member {
  [0..*] <>-- [1] Class
}

kind Method specializes Member
kind Variable specializes NamedElement
kind Class specializes NamedElement
quality Mutability
quality ValueType {
  [0..1] -- characterizedBy4 -- [1] Variable
}

subkind Attribute specializes Variable, Member

quality ReturnType {
  [0..1] -- characterizedBy3 -- [1] Method
}

kind Types
category Type
subkind PrimitiveType specializes Types

disjoint complete genset TypeAndPrimitiveType {
  general Type
  specifics PrimitiveType
}

kind Module {
  @componentOf
  [0..1] <>-- constitutedOf -- [0..*] Module
}

subkind PhysicalModule specializes Module {
  [1..*] -- [0..*] ObjectOrientedSourceCode
}
subkind LogicalModule specializes Module {
  name: boolean 
  @componentOf
  [1] -- organizedIn -- [0..*] Class
}


