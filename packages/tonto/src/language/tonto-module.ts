import ElkConstructor from "elkjs";
import { Module, inject } from "langium";
import { LangiumSprottyServices, LangiumSprottySharedServices, SprottyDiagramServices, SprottySharedModule } from "langium-sprotty";
import { DefaultSharedModuleContext, LangiumServices, LangiumSharedServices, PartialLangiumServices, PartialLangiumSharedServices, createDefaultModule, createDefaultSharedModule } from "langium/lsp";
import "reflect-metadata";
import { DefaultElementFilter, ElkFactory, ElkLayoutEngine, IElementFilter, ILayoutConfigurator } from "sprotty-elk";
import { TontoLayoutConfigurator } from "./diagram/layout-config.js";
import { TontoDiagramGenerator } from "./diagram/tonto-diagram.js";
import { TontoGeneratedModule, TontoGeneratedSharedModule } from "./generated/module.js";
import { TontoActionProvider } from "./lsp/tonto-code-actions.js";
import { TontoCompletionProvider } from "./lsp/tonto-completion-provider.js";
import { TontoHoverProvider } from "./lsp/tonto-hover-provider.js";
import { TontoParserErrorMessageProvider } from "./lsp/tonto-parser-error-message-provider.ts.js";
import { TontoSemanticTokenProvider } from "./lsp/tonto-semantic-token-provider.js";
import { TontoQualifiedNameProvider } from "./references/tonto-name-provider.js";
import { TontoScopeComputation } from "./references/tonto-scope-computation.js";
import { TontoScopeProvider } from "./references/tonto-scope-provider.js";
import { TontoValidationRegistry } from "./tonto-validator.js";
import { TontoValidator } from "./validators/TontoValidator.js";

/**
 * Declaration of custom services - add your own service classes here.
 */
export type TontoAddedServices = {
    references: {
        QualifiedNameProvider: TontoQualifiedNameProvider
    },
    validation: {
        TontoValidator: TontoValidator
    },
    layout: {
        ElkFactory: ElkFactory,
        ElementFilter: IElementFilter,
        LayoutConfigurator: ILayoutConfigurator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type TontoServices = LangiumServices & TontoAddedServices & LangiumSprottyServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
const ElkDefault = ElkConstructor.default;
export const TontoModule: Module<TontoServices, PartialLangiumServices & TontoAddedServices & SprottyDiagramServices> = {
    diagram: {
        DiagramGenerator: services => new TontoDiagramGenerator(services),
        ModelLayoutEngine: services => new ElkLayoutEngine(
            services.layout.ElkFactory,
            services.layout.ElementFilter,
            services.layout.LayoutConfigurator
        ),
    },
    layout: {
        ElkFactory: () => () => new ElkDefault({ algorithms: ["layered"] }),
        ElementFilter: () => new DefaultElementFilter,
        LayoutConfigurator: () => new TontoLayoutConfigurator
    },
    references: {
        ScopeComputation: (services: TontoServices) => new TontoScopeComputation(services),
        QualifiedNameProvider: () => new TontoQualifiedNameProvider(),
        ScopeProvider: (services: TontoServices) => new TontoScopeProvider(services),
    },
    validation: {
        ValidationRegistry: (services: TontoServices) => new TontoValidationRegistry(services),
        TontoValidator: () => new TontoValidator(),
    },
    lsp: {
        CodeActionProvider: () => new TontoActionProvider(),
        // Formatter: () => new TontoFormatter(),
        SemanticTokenProvider: (services) => new TontoSemanticTokenProvider(services),
        CompletionProvider: (services) => new TontoCompletionProvider(services),
        HoverProvider: (services) => new TontoHoverProvider(services),
    },
    parser: {
        ParserErrorMessageProvider: () => new TontoParserErrorMessageProvider(),
    }
};

export type TontoSharedServices = LangiumSharedServices;

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */

export function createTontoServices(
    context: DefaultSharedModuleContext,
    sharedModule?: Module<LangiumSprottySharedServices, PartialLangiumSharedServices>
): { shared: LangiumSprottySharedServices, Tonto: TontoServices } {
    const shared = inject(
        createDefaultSharedModule(context),
        TontoGeneratedSharedModule,
        SprottySharedModule,
        sharedModule
    );
    const Tonto = inject(
        createDefaultModule({ shared }),
        TontoGeneratedModule,
        TontoModule
    );
    shared.ServiceRegistry.register(Tonto);
    return { shared, Tonto: Tonto };
}
